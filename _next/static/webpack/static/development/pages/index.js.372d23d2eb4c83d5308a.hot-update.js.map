{"version":3,"file":"static/webpack/static/development/pages/index.js.372d23d2eb4c83d5308a.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["/* @jsx jsx */\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport Head from 'next/head';\nimport theme from '../parts/theme';\nimport { jsx } from 'theme-ui';\nimport { ThemeProvider } from 'theme-ui';\nimport { requestInterval } from '../parts/utils';\n\nlet fs = theme.fontSizes[0];\n\nlet once = false;\nlet size = 14;\n\nlet special_keys = 'x?ew'.split('');\n\nObject.fromEntries = arr =>\n  Object.assign({}, ...Array.from(arr, ([k, v]) => ({ [k]: v })));\n\nlet xp = 4;\nlet yp = 4;\n\nconst Home = () => {\n  let [dimensions, setDimensions] = useState([null, null]);\n  let [mode, setMode] = useState('draw');\n\n  let canvasRef = useRef();\n  let overlayCanvasRef = useRef();\n\n  let requestRef = useRef();\n  let keymap = useRef({});\n  let coordinates = useRef([0, 0]);\n  let vertical = useRef(null);\n  let horizontal = useRef(null);\n  let backslash = useRef(null);\n  let slash = useRef(null);\n  let [help, toggleHelp] = useState(true);\n\n  function KeyTip(letter) {\n    return (\n      <span\n        className=\"keytip\"\n        onClick={() => {\n          keymap.current[letter] = true;\n          keyAction(letter, false);\n          keymap.current[letter] = false;\n        }}\n        sx={{\n          outline: 'solid 1px black',\n          width: '2ch',\n          textAlign: 'center',\n          display: 'inline-block',\n          userSelect: 'none',\n          cursor: 'default',\n        }}\n      >\n        {letter}\n      </span>\n    );\n  }\n\n  function keyAction(key, repeat) {\n    let canvas_width = Math.floor(canvasRef.current.offsetWidth);\n    let canvas_height = Math.floor(canvasRef.current.offsetHeight);\n\n    let grid_width = Math.floor((canvas_width - xp * 2) / size) * size;\n    let grid_height = Math.floor((canvas_height - yp * 2) / size) * size;\n\n    let ctx = canvasRef.current.getContext('2d');\n    ctx.fillStyle = 'black';\n\n    let _mode = mode;\n\n    if (special_keys.includes(key)) {\n      if (key === 'e' && !repeat) {\n        if (_mode === 'draw') {\n          _mode = 'erase';\n          setMode(_mode);\n        } else if (_mode === 'erase') {\n          _mode = 'draw';\n          setMode(_mode);\n        }\n      } else if (key === 'x' && !repeat) {\n        clearGrid();\n      } else if (key === 'w' && !repeat) {\n        let encoded = canvasRef.current.toDataURL('image/png');\n        let link = document.createElement('a');\n        link.setAttribute('href', encoded);\n        link.setAttribute('download', 'etch.png');\n        link.dispatchEvent(\n          new MouseEvent(`click`, {\n            bubbles: true,\n            cancelable: true,\n            view: window,\n          })\n        );\n        return;\n      } else if (key === '?' && !repeat) {\n        toggleHelp(!help);\n        return;\n      }\n    }\n\n    if (key === 'init') {\n      ctx.fillStyle = 'white';\n      ctx.fillRect(0, 0, canvas_width, canvas_height);\n    }\n\n    let octx = overlayCanvasRef.current.getContext('2d');\n    octx.strokeStyle = _mode === 'draw' ? 'limegreen' : 'hotpink';\n    let ostroke = 4;\n    octx.lineWidth = ostroke;\n\n    let current = coordinates.current;\n\n    let inc = size;\n    let modify = [0, 0];\n    if (keymap.current['j']) modify[1] += inc;\n    if (keymap.current['k']) modify[1] += -inc;\n    if (keymap.current['h']) modify[0] += -inc;\n    if (keymap.current['l']) modify[0] += inc;\n\n    let next = [current[0] + modify[0], current[1] + modify[1]];\n\n    if (next[0] < 0) next[0] = grid_width - size * 2;\n    if (next[0] >= grid_width - size) next[0] = 0;\n    if (next[1] < 0) next[1] = grid_height - size * 2;\n    if (next[1] >= grid_height - size) next[1] = 0;\n    coordinates.current = next;\n\n    // modify drawing\n    let c = next[0] / size;\n    let r = next[1] / size;\n\n    let new_val = _mode === 'draw' ? true : false;\n    if (keymap.current['a']) {\n      let index = r * (grid_width / size + 1) + c;\n      vertical.current[index] = new_val;\n    }\n    if (keymap.current['d']) {\n      let index = (r + 1) * (grid_width / size + 1) + c;\n      horizontal.current[index] = new_val;\n    }\n    if (keymap.current['s']) {\n      let index = r * (grid_width / size + 1) + c;\n      horizontal.current[index] = new_val;\n    }\n    if (keymap.current['f']) {\n      let index = r * (grid_width / size + 1) + c + 1;\n      vertical.current[index] = new_val;\n    }\n    if (keymap.current['g']) {\n      let index = r * (grid_width / size + 1) + c;\n      backslash.current[index] = new_val;\n    }\n    if (keymap.current['r']) {\n      let index = r * (grid_width / size + 1) + c;\n      slash.current[index] = new_val;\n    }\n\n    function moveTo(ctx, x, y) {\n      ctx.moveTo(x + xp, y + yp);\n    }\n\n    function lineTo(ctx, x, y) {\n      ctx.lineTo(x + xp, y + yp);\n    }\n\n    ctx.clearRect(0, 0, canvas_width, canvas_height);\n\n    if (vertical.current !== null) {\n      let va = vertical.current;\n      let ha = horizontal.current;\n      let ba = backslash.current;\n      let sa = slash.current;\n\n      let dc = grid_width / size + 1;\n      let dr = grid_height / size + 1;\n\n      for (let i = 0; i < va.length; i++) {\n        let v = va[i];\n        let h = ha[i];\n        let b = ba[i];\n        let s = sa[i];\n\n        let c = i % dc;\n        let r = Math.floor(i / dc);\n\n        ctx.beginPath();\n        if (v === true) {\n          moveTo(ctx, c * size, r * size);\n          lineTo(ctx, c * size, r * size + size);\n        }\n        if (h === true) {\n          moveTo(ctx, c * size, r * size);\n          lineTo(ctx, c * size + size, r * size);\n        }\n        if (b === true) {\n          moveTo(ctx, c * size + size, r * size + size);\n          lineTo(ctx, c * size, r * size);\n        }\n        if (s === true) {\n          moveTo(ctx, c * size, r * size + size);\n          lineTo(ctx, c * size + size, r * size);\n        }\n        ctx.stroke();\n      }\n    }\n\n    octx.clearRect(0, 0, window.innerWidth, window.innerHeight);\n    octx.strokeRect(\n      coordinates.current[0] - ostroke / 2 + xp,\n      coordinates.current[1] - ostroke / 2 + yp,\n      size + ostroke,\n      size + ostroke\n    );\n  }\n\n  function downHandler(e) {\n    keymap.current[e.key] = true;\n    keyAction(e.key, e.repeat);\n  }\n\n  function upHandler(e) {\n    keymap.current[e.key] = false;\n  }\n\n  function clearGrid() {\n    let canvas_width = Math.floor(canvasRef.current.offsetWidth);\n    let canvas_height = Math.floor(canvasRef.current.offsetHeight);\n\n    let grid_width = Math.floor((canvas_width - xp * 2) / size) * size;\n    let grid_height = Math.floor((canvas_height - yp * 2) / size) * size;\n\n    let columns = grid_width / size + 1;\n    let rows = grid_height / size + 1;\n\n    vertical.current = Array(columns * rows).fill(false);\n    horizontal.current = vertical.current.slice();\n    backslash.current = vertical.current.slice();\n    slash.current = vertical.current.slice();\n  }\n\n  function setWindowSize() {\n    console.log('set size');\n    let canvas_width = Math.floor(window.innerWidth);\n    let canvas_height = Math.floor(window.innerHeight);\n\n    console.log(canvas_width, canvas_height);\n\n    clearGrid();\n\n    let dpr = window.devicePixelRatio || 1;\n\n    canvasRef.current.width = canvas_width * dpr;\n    canvasRef.current.height = canvas_height * dpr;\n    let ctx = canvasRef.current.getContext('2d');\n    ctx.scale(dpr, dpr);\n\n    overlayCanvasRef.current.width = canvas_width * dpr;\n    overlayCanvasRef.current.height = canvas_height * dpr;\n    let octx = overlayCanvasRef.current.getContext('2d');\n    octx.scale(dpr, dpr);\n\n    setDimensions([canvas_width, canvas_height]);\n  }\n\n  useEffect(() => {\n    if (!once) {\n      setWindowSize();\n      setTimeout(() => {\n        keyAction('init', false);\n      }, 0);\n      once = true;\n    }\n\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  }, [mode, help]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div>\n        <Head>\n          <title>Hex</title>\n        </Head>\n        <style jsx global>{`\n          @font-face {\n            font-family: 'custom';\n            src: url('/static/fonts/IBMPlexMono-Regular.woff2') format('woff2'),\n              url('/static/fonts/IBMPlexMono-Regular.woff') format('woff');\n          }\n          * {\n            box-sizing: border-box;\n          }\n          html {\n            font-family: custom, monospace;\n            font-size: ${theme.fontSizes[0]}px;\n            background: white;\n            line-height: ${theme.lineHeights.body};\n          }\n          body {\n            margin: 0;\n            overflow: hidden;\n          }\n          textarea {\n            font-family: inherit;\n            font-size: inherit;\n            line-height: inherit;\n          }\n          p {\n            margin: 0;\n          }\n          .keytip + .keytip {\n            margin-left: 1px;\n          }\n        `}</style>\n        <canvas\n          ref={canvasRef}\n          sx={{ background: 'white' }}\n          css={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            width: dimensions[0] + size,\n            height: dimensions[1] + size,\n            display: dimensions[0] !== null ? 'block' : 'none',\n          }}\n        />\n        <canvas\n          ref={overlayCanvasRef}\n          sx={{ background: 'transparent' }}\n          css={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            width: dimensions[0] + size,\n            height: dimensions[1] + size,\n\n            display: dimensions[0] !== null ? 'block' : 'none',\n          }}\n        />\n      </div>\n\n      <div\n        css={{\n          position: 'fixed',\n          outline: 'solid 1px black',\n          display: help ? 'block' : 'none',\n          maxWidth: `calc(100% - ${theme.space[0] * 2}px)`,\n          background: 'rgba(255,255,255,0.8)',\n        }}\n        sx={{ px: '1ch', pb: 1, pt: 1, right: 0, bottom: 0 }}\n      >\n        <div sx={{ marginBottom: 0 }}>\n          Hex is a keyboard-driven, grid-based drawing tool.\n        </div>\n        <div style={{ position: 'relative' }}>\n          <div sx={{ marginBottom: 0 }}>\n            {KeyTip('e')} toggle mode:{' '}\n            {['draw', 'erase'].map(m => (\n              <span\n                key={`mode_${m}`}\n                sx={{ px: '1ch' }}\n                css={{\n                  background:\n                    m === mode\n                      ? mode === 'draw'\n                        ? 'limegreen'\n                        : 'hotpink'\n                      : 'none',\n                }}\n              >\n                {m}\n              </span>\n            ))}\n          </div>\n          <div sx={{ mb: 1 }}>Draw & move:</div>\n          <div css={{ display: 'flex' }}>\n            <div sx={{ display: 'flex', marginRight: '2ch' }}>\n              {[\n                [0, 0, 0, size],\n                [0, 0, size, 0],\n                [0, size, size, size],\n                [size, 0, size, size],\n                [size, 0, 0, size],\n                [0, 0, size, size],\n              ].map((c, i) => (\n                <div\n                  className=\"keytip\"\n                  css={{\n                    width: '2ch',\n                    height: theme.space[0],\n                    paddingLeft: `calc(1ch - ${size / 2}px)`,\n                  }}\n                >\n                  <svg viewBox={`0 0 ${size} ${size}`}>\n                    <line\n                      x1={c[0]}\n                      y1={c[1]}\n                      x2={c[2]}\n                      y2={c[3]}\n                      stroke=\"black\"\n                      strokeWidth={i > 3 ? 1 : 2}\n                    />\n                  </svg>\n                </div>\n              ))}\n            </div>\n            <div>\n              {['←', '↓', '↑', '→'].map(a => (\n                <span\n                  className=\"keytip\"\n                  key={`arrow_${a}`}\n                  sx={{\n                    display: 'inline-block',\n                    width: '2ch',\n                    textAlign: 'center',\n                  }}\n                >\n                  {a}\n                </span>\n              ))}\n            </div>\n          </div>\n          <div sx={{ display: 'flex' }}>\n            <div style={{ marginRight: '2ch' }}>\n              {KeyTip('a')}\n              {KeyTip('s')}\n              {KeyTip('d')}\n              {KeyTip('f')}\n              {KeyTip('r')}\n              {KeyTip('g')}\n            </div>\n            <div>\n              {KeyTip('h')}\n              {KeyTip('j')}\n              {KeyTip('k')}\n              {KeyTip('l')}\n            </div>\n          </div>\n          <div\n            sx={{\n              mt: 0,\n              mb: 1,\n            }}\n          >\n            Special:\n          </div>\n          <div>\n            {KeyTip('w')} save png&nbsp; {KeyTip('x')} clear&nbsp; {KeyTip('?')}{' '}\n            toggle help\n          </div>\n        </div>\n      </div>\n      {help ? null : (\n        <div\n          sx={{\n            position: 'fixed',\n            right: 0,\n            bottom: 0,\n          }}\n        >\n          {KeyTip('?')}\n        </div>\n      )}\n    </ThemeProvider>\n  );\n};\n\nexport default Home;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AADA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAAA;AAAA;AACA;AAeA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmoCA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAPA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;;;;A","sourceRoot":""}